# MediMate Terminal Commands Reference

## 🚀 Quick Start Commands

```bash
# Start all services (primary command)
./start-dev.sh

# Alternative start
./services.sh start

# Stop all services
./services.sh stop

# Restart all services
./services.sh restart
```

## 🐳 Docker Management

### Service Control
```bash
# Start all services
./services.sh start

# Stop all services  
./services.sh stop

# Restart all services
./services.sh restart

# Reset database and volumes
./services.sh reset

# Rebuild all services
./services.sh build

# Rebuild specific service
./services.sh build frontend
./services.sh build backend
```

### View Logs
```bash
# Show logs for all services
./services.sh logs

# Show logs for specific service
./services.sh logs frontend
./services.sh logs backend
./services.sh logs database
./services.sh logs redis
./services.sh logs nginx

# Follow logs in real-time
docker-compose logs -f
docker-compose logs -f frontend
```

### Container Shell Access
```bash
# Open shell in backend container
./services.sh shell backend

# Open shell in frontend container
./services.sh shell frontend

# Alternative direct access
docker-compose exec backend sh
docker-compose exec frontend sh
```

## 🛠️ Development Commands

### Check Running Services
```bash
# See all running containers
docker ps

# See all containers (including stopped)
docker ps -a

# Check service status
docker-compose ps
```

### Port Management
```bash
# Check what's using port 3000
lsof -i :3000

# Check what's using port 3001
lsof -i :3001

# Check multiple ports
lsof -i :3000 -i :3001 -i :5432

# Kill process using specific port
kill -9 $(lsof -ti:3000)
kill -9 $(lsof -ti:3001)
```

### Docker Status
```bash
# Check if Docker is running
docker info

# Docker version
docker --version
docker-compose --version

# Docker system information
docker system df
docker system prune -f
```

## 📦 Package Management

### Frontend (React)
```bash
# Navigate to frontend
cd frontend

# Install new package
npm install package-name
npm install --save-dev package-name

# Update packages
npm update

# Check for outdated packages
npm outdated

# Local development (without Docker)
npm start
```

### Backend (Node.js)
```bash
# Navigate to backend
cd backend

# Install new package
npm install package-name

# Install development dependency
npm install --save-dev package-name

# Local development (without Docker)
npm run dev
npm start
```

## 🗄️ Database Management

### PostgreSQL Commands
```bash
# Connect to database
docker-compose exec database psql -U dev medimate

# Run SQL commands from file
docker-compose exec database psql -U dev medimate -f /path/to/file.sql

# Backup database
docker-compose exec database pg_dump -U dev medimate > backup.sql

# Restore database
docker-compose exec -T database psql -U dev medimate < backup.sql

# Reset database (removes all data)
./services.sh reset
```

### Database Queries (inside psql)
```sql
-- List all tables
\dt

-- Describe table structure
\d table_name

-- List all databases
\l

-- Quit psql
\q

-- Show current database
SELECT current_database();

-- Check table contents
SELECT * FROM users LIMIT 5;
SELECT * FROM medications LIMIT 5;
```

## 🔍 Debugging Commands

### Container Debugging
```bash
# Check container logs
docker-compose logs frontend
docker-compose logs backend

# Follow logs in real-time
docker-compose logs -f backend

# Inspect container
docker inspect medimate_frontend
docker inspect medimate_api

# Check container resource usage
docker stats

# List Docker networks
docker network ls

# Inspect network
docker network inspect medi-mate_medimate_network
```

### File System
```bash
# Check disk usage
df -h

# Check directory size
du -sh .
du -sh */

# List files with permissions
ls -la

# Find files
find . -name "*.js"
find . -name "package.json"
```

## 🌐 Network & API Testing

### Test Endpoints
```bash
# Test backend health
curl http://localhost:3001/api/health

# Test with pretty JSON
curl -s http://localhost:3001/api/health | python -m json.tool

# Test medications endpoint
curl http://localhost:3001/api/medications

# Test with headers
curl -H "Content-Type: application/json" http://localhost:3001/api/health
```

### Network Diagnostics
```bash
# Check if services are responding
ping localhost
telnet localhost 3000
telnet localhost 3001

# Check DNS resolution (if using custom domains)
nslookup localhost
```

## 🔧 Troubleshooting Commands

### Clean Restart
```bash
# Stop everything
./services.sh stop

# Remove all containers and volumes
docker-compose down -v

# Remove all stopped containers
docker rm $(docker ps -aq)

# Remove unused images
docker image prune -f

# Remove everything and start fresh
docker system prune -af
./services.sh start
```

### Fix Common Issues
```bash
# Port already in use
kill -9 $(lsof -ti:3000)
kill -9 $(lsof -ti:3001)

# Docker daemon not running
# Start Docker Desktop application

# Permission denied
chmod +x script-name.sh

# Node modules issues
rm -rf frontend/node_modules
rm -rf backend/node_modules
./services.sh build
```

### Memory & Performance
```bash
# Check system resources
top
htop (if installed)

# Check memory usage
free -h (Linux)
vm_stat (Mac)

# Check Docker resource usage
docker system df
docker stats
```

## 📂 File Operations

### Navigation
```bash
# Navigate to project root
cd /path/to/medi-mate

# Navigate to specific service
cd frontend
cd backend
cd database

# Go back to parent directory
cd ..
cd -  # Go to previous directory
```

### File Editing
```bash
# Edit with VS Code
code .
code frontend/src/App.js
code backend/src/server.js

# Edit with nano
nano frontend/package.json
nano docker-compose.yml

# Edit with vim
vim backend/src/server.js
```

### File Permissions
```bash
# Make script executable
chmod +x script-name.sh

# Check file permissions
ls -la filename

# Change file ownership
chown user:group filename
```

## 🔄 Git Commands (Optional)

### Basic Git Operations
```bash
# Initialize git repository
git init

# Add all files
git add .

# Commit changes
git commit -m "Initial commit"

# Check status
git status

# Check differences
git diff

# View commit history
git log --oneline
```

## 🚨 Emergency Commands

### Force Stop Everything
```bash
# Stop all Docker containers
docker stop $(docker ps -q)

# Remove all containers
docker rm $(docker ps -aq)

# Kill all node processes
pkill -f node

# Restart Docker Desktop
# Use Docker Desktop menu: Restart
```

### System Reset
```bash
# Nuclear option - removes everything
docker system prune -af --volumes
rm -rf frontend/node_modules
rm -rf backend/node_modules
./services.sh start
```

## 📊 Monitoring Commands

### Real-time Monitoring
```bash
# Watch container stats
watch docker stats

# Monitor logs continuously
./services.sh logs | grep ERROR

# Watch file changes
watch ls -la

# Monitor network connections
netstat -an | grep 3000
```

## 🎯 Quick Access URLs

```bash
# Open in browser (Mac)
open http://localhost:3000  # Frontend
open http://localhost:3001  # Backend API
open http://localhost:80    # Full app via Nginx

# Test endpoints quickly
curl localhost:3001/api/health
curl localhost:3001/api/medications
```

## 💡 Pro Tips

### Aliases (add to ~/.zshrc or ~/.bashrc)
```bash
# Add these to your shell profile for quick access
alias medi="cd /path/to/medi-mate"
alias mstart="./services.sh start"
alias mstop="./services.sh stop"
alias mlogs="./services.sh logs"
alias mrestart="./services.sh restart"
```

### Environment Variables
```bash
# Check environment variables
printenv | grep REACT
printenv | grep NODE

# Set temporary environment variable
export NODE_ENV=development
export DEBUG=true
```

---

## 📋 Command Quick Reference

**Most Used Commands:**
```bash
./start-dev.sh              # Start everything
./services.sh stop           # Stop everything  
./services.sh logs backend   # Debug backend
./services.sh shell frontend # Debug frontend
curl localhost:3001/api/health # Test API
```

**Emergency Commands:**
```bash
kill -9 $(lsof -ti:3000)     # Fix port conflicts
docker-compose down -v       # Reset database
./services.sh reset          # Nuclear reset
```