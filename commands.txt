# MediMate Terminal Commands Reference

## üöÄ Quick Start Commands

```bash
# Start all services (primary command)
make dev

# Install all dependencies
make install

# Full project setup
make setup

# See all available commands
make help
```

## üê≥ Docker Management

### Service Control
```bash
# Start all services
make docker-up

# Stop all services  
make docker-down

# Restart all services
make docker-restart

# View Docker logs
make docker-logs
```

### Direct Docker Commands
```bash
# Reset database and volumes
docker-compose down -v

# Rebuild specific service
docker-compose build frontend
docker-compose build backend

# Follow logs in real-time
docker-compose logs -f
docker-compose logs -f frontend
```

### Container Shell Access
```bash
# Open shell in containers
docker-compose exec backend sh
docker-compose exec frontend sh
docker-compose exec database sh
```

## üõ†Ô∏è Development Commands

### Individual Services
```bash
# Start backend dev server
make dev-backend

# Start frontend dev server
make dev-frontend

# Start mobile metro bundler
make dev-mobile
```

### Building
```bash
# Build all projects
make build

# Build specific projects
make build-shared
make build-backend
make build-frontend
```

### Testing & Quality
```bash
# Run all tests
make test

# Run specific tests
make test-backend
make test-frontend
make test-mobile

# Run linters
make lint

# Type checking
make typecheck
```

### Mobile Development
```bash
# Run iOS app
make ios

# Run Android app
make android
```

## üì¶ Package Management

### Install Dependencies
```bash
# Install all dependencies
make install

# Install specific service dependencies
make install-backend
make install-frontend
make install-mobile
make install-shared
```

### Add New Packages
```bash
# Frontend (React)
cd frontend && npm install package-name
cd frontend && npm install --save-dev package-name

# Backend (Node.js)
cd backend && npm install package-name
cd backend && npm install --save-dev package-name

# Mobile (React Native)
cd mobile && npm install package-name
cd mobile && npm install --save-dev package-name
```

## üóÑÔ∏è Database Management

### MongoDB Commands
```bash
# Connect to MongoDB
docker-compose exec database mongosh -u admin -p adminpass medimate

# Export database
docker-compose exec database mongodump -u admin -p adminpass --db medimate --out /dump

# Import database
docker-compose exec database mongorestore -u admin -p adminpass --db medimate /dump/medimate

# Reset database (removes all data)
docker-compose down -v
```

### MongoDB Queries (inside mongosh)
```javascript
// Show all databases
show dbs

// Use medimate database
use medimate

// Show all collections
show collections

// Find documents
db.users.find()
db.medications.find().limit(5)
db.reminders.find({status: "pending"})

// Count documents
db.users.countDocuments()

// Exit
exit
```

## üîç Debugging Commands

### Check Running Services
```bash
# See all running containers
docker ps

# Check service status
docker-compose ps

# Check container resource usage
docker stats
```

### Container Debugging
```bash
# Check container logs
docker-compose logs frontend
docker-compose logs backend

# Follow logs in real-time
docker-compose logs -f backend

# Inspect container
docker inspect medimate_frontend
docker inspect medimate_api
```

## üåê Network & API Testing

### Test Endpoints
```bash
# Test backend health
curl http://localhost:3001/api/health

# Test with pretty JSON
curl -s http://localhost:3001/api/health | python -m json.tool

# Test medications endpoint
curl http://localhost:3001/api/medications

# Test with headers
curl -H "Content-Type: application/json" http://localhost:3001/api/health
```

### Port Management
```bash
# Check what's using ports
lsof -i :3000
lsof -i :3001
lsof -i :27017

# Kill process using specific port
kill -9 $(lsof -ti:3000)
kill -9 $(lsof -ti:3001)
```

## üîß Troubleshooting Commands

### Clean Restart
```bash
# Clean all build artifacts
make clean

# Stop and remove all containers
make docker-down
docker-compose down -v

# Remove all stopped containers
docker rm $(docker ps -aq)

# Remove unused images
docker image prune -f

# Full system reset
docker system prune -af
make setup
make dev
```

### Fix Common Issues
```bash
# Port already in use
kill -9 $(lsof -ti:3000)
kill -9 $(lsof -ti:3001)

# Permission denied
chmod +x Makefile

# Node modules issues
make clean
make install
```

## üìÇ File Operations

### Navigation
```bash
# Navigate to project root
cd /path/to/medi-mate

# Navigate to specific service
cd frontend
cd backend
cd mobile
cd shared

# Go back to parent directory
cd ..
```

### File Editing
```bash
# Edit with VS Code
code .
code frontend/src/App.tsx
code backend/src/server.ts

# Edit with nano
nano docker-compose.yml
nano Makefile

# Edit with vim
vim backend/src/server.ts
```

## üîÑ Git Commands

### Basic Git Operations
```bash
# Check status
git status

# Add and commit changes
git add .
git commit -m "Your message"

# Install git hooks
make install-hooks
```

## üö® Emergency Commands

### Force Stop Everything
```bash
# Stop all Docker containers
docker stop $(docker ps -q)

# Remove all containers
docker rm $(docker ps -aq)

# Kill all node processes
pkill -f node
```

### System Reset
```bash
# Nuclear option - removes everything
docker system prune -af --volumes
make clean
make setup
```

## üìä Monitoring Commands

### Real-time Monitoring
```bash
# Watch container stats
watch docker stats

# Monitor logs continuously
make docker-logs | grep ERROR

# Monitor network connections
netstat -an | grep 3000
```

## üéØ Quick Access URLs

```bash
# Frontend
http://localhost:3000

# Backend API
http://localhost:3001

# Mobile Metro Bundler
http://localhost:8081

# Nginx Proxy
http://localhost:80

# MongoDB
mongodb://admin:adminpass@localhost:27017
```

## üí° Pro Tips

### Aliases (add to ~/.zshrc or ~/.bashrc)
```bash
# Add these to your shell profile for quick access
alias medi="cd /path/to/medi-mate"
alias mstart="make dev"
alias mstop="make docker-down"
alias mlogs="make docker-logs"
alias mtest="make test"
```

### Environment Variables
```bash
# Check environment variables
printenv | grep REACT
printenv | grep NODE
printenv | grep MONGO

# Set temporary environment variable
export NODE_ENV=development
export DEBUG=true
```

---

## üìã Command Quick Reference

**Most Used Commands:**
```bash
make dev                     # Start everything
make docker-down             # Stop everything  
make docker-logs             # View logs
make test                    # Run tests
make typecheck               # Type checking
curl localhost:3001/api/health # Test API
```

**Emergency Commands:**
```bash
kill -9 $(lsof -ti:3000)     # Fix port conflicts
docker-compose down -v       # Reset database
make clean                   # Clean everything
```

**Development Flow:**
```bash
make setup                   # Initial setup
make dev                     # Start development
make test                    # Run tests
make typecheck               # Check types
make docker-down             # Stop when done
```